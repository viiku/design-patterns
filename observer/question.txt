1. The weather station will be based on our patent pending WeatherData object, which tracks current 
weather conditions (temperature, humidity, and barometric pressure).  We’d like you to create an 
application that initially provides three display elements:  
current conditions, weather statistics, and a simple forecast,  
all updated in real time as the WeatherData object acquires the most recent measurements.  
Further, this is an expandable weather station. Weather-ORama wants to allow other developers to write
their own weather displays and plug them right in. So it’s important that new displays will be easy to
add in the future. Weather-O-Rama thinks we have a great business model: once the customers are hooked,
we intend to charge them for each display they use. Now for the best part: we are going to pay you in 
stock options.


2. Event Listeners:
    UI frameworks like Java Swing or JavaFX use the Observer Pattern for event handling.

3. Publish-Subscribe Systems:
    Message brokers like Kafka or RabbitMQ implement a variation of the Observer Pattern.

4. Stock Market Applications:
    Applications where stock price changes update multiple displays or users.

5. Implementation-Oriented Questions
    Design and Code:

    5.1 Design an event system where multiple observers subscribe to different types of events (e.g., error events, info events).
    5.2 Write a program to demonstrate the Observer Pattern for a stock market application where stock prices trigger notifications to investors.
    
    Event Queue:

    5.3 How would you modify the Observer Pattern to include an event queue for buffering notifications?
    
    Thread Safety:

    5.4 How would you make the Observer Pattern thread-safe in a multi-threaded environment?
    5.5 What are the challenges of using the Observer Pattern in a concurrent system, and how can they be mitigated?
    
    Detachment and Cleanup:

    5.6 How would you ensure that detached observers do not receive notifications in the future?
    5.7 What strategies can you use to prevent memory leaks caused by observers that are no longer needed?

6. In a real-world example, consider a news agency system where the agency (subject) publishes news 
articles, and multiple news outlets (observers) subscribe to receive updates. Whenever the news agency
publishes a new article, it automatically notifies all the subscribed news outlets. These outlets can
then update their platforms (like websites, TV broadcasts, or newspapers) with the latest news. 
This ensures that all subscribers get the latest information without the news agency needing to know the specifics of each outlet's update process. This decouples the news agency from the subscribers, promoting flexibility and modularity in how updates are handled

7. Implement notification Design